# Data Cleaning ----------------------------------------------------------------
# File Name: Preassessment S20 merged.csv
# Kennel: r
# Created On: 02/20/2020
# Modified On: 03/23/2020
# Load -------------------------------------------------------------------------
require(data.table)
require(dplyr)
dat0 <- fread("data/source/Preassessment S20 merged.csv",
header = TRUE, sep = ",")
# Descriptive ------------------------------------------------------------------
head(dat0) # seems normal
glimpse(dat0) # multiple question columns contain non-numeric values
# Validation -------------------------------------------------------------------
# Remove irrelevant columns (39th, 40th, and 49th)
dat <- subset(dat0, select = c(1:38, 41:48))
# Empty list to store results
a <- c(0)
b <- list(0)
# Create a for loop to check if the length of unique values in each column
# is equal to 5. If not, print column number and its unique values.
for (i in 1:34) {
a[i] <- as.numeric(length(table(dat[, ..i])))
}
temp <- print(which(a != 5)) # Some questions have extra inputs
table(dat[, c(4, 5)])
# extra input: "BLANK"
# extra input: "MULT"
# Check if there is NA values in each column, including the ID column.
for (i in 1:35) {
b[[i]] <- table(is.na(dat[, ..i]))
ifelse(length(b[[i]]) == 1,
no  = print(i) & print(b[[i]]),
yes = length(b[[i]])
)
}
# 5 NA values in SiS.ID
# Process ----------------------------------------------------------------------
# Convert question answers to numeric
dat[,1:34] <- lapply(dat[, 1:34], function(x) as.numeric(as.character(x)))
# Locate the only row that contains NA values
which(is.na(dat[, 35]))
# Check row 140
dat[-5, ]
# It seems all questions are answered in this row. Only ID is missing.
# We decided to keep those rows.
# Replace BLANK and MULT input with NA
dat[dat == "BLANK"] <- NA
dat[dat == "MULT"] <- NA
# Create a vector to store column names for replacement
survey_col_names <- c(1:34)
survey_col_names <- paste("Q", survey_col_names, sep = "")
demo_col_names <- c("SIS.ID", "NNumber", "NetID", "First.Name", "Last.Name",
"Most.Recent.Semester", "Most.Recent.Term",
"Most.Recent.Grade", "Times.Prerec.Taken",
"Repeated.Grade", "Repeated", "Added.Feb12")
all_col_names <- append(demo_col_names, survey_col_names, after = 0)
colnames(dat) <- all_col_names
# Output (Not Run) -------------------------------------------------------------
# write.csv(dat, "data/preassessment_cleaned.csv", row.names = FALSE)
# Data Analysis ----------------------------------------------------------------
# File Name: preassessment_final.csv
# Created On: 02/20/2020
# Modified On: 03/23/2020
# Load -------------------------------------------------------------------------
dat0 <- fread("data/preassessment_final.csv", header = TRUE)
dat <- dat0
dat[dat == "Unknown"] <- NA
# NYU colors
NYUpurple <- "#57068c"
Blue <- "#28619e"
Orange <- "#e86c00"
Lblue <- "#3dbbdb"
Green <- "#007c70"
Red <- "#d71e5e"
questions <- fread("data/source/Preassessment survey questions.csv")
q_complete <- questions[ , 1]
colnames(q_complete) <- "Questions, Complete List"
q_complete
q_deep <- questions[questions$Approaches == "Deep", 1]
colnames(q_deep) <- "Questions, Deep Approach"
q_deep
q_surf <- questions[questions$Approaches == "Surface", 1]
colnames(q_surf) <- "Questions, Surface Approach"
q_surf
q_strat <- questions[questions$Approaches == "Strategic", 1]
colnames(q_strat) <- "Questions, Strategic Approach"
q_strat
q_self <- questions[questions$Approaches == "Self-Efficacy", 1]
colnames(q_self) <- "Questions, Academic Self-Efficacy Approach"
q_self
q_memo <- questions[questions$Approaches == "Memorization", 1]
colnames(q_memo) <- "Questions, Conceptual Connections/Memorization"
q_memo[5, ] <- paste("(*)", q_memo[5, ])
q_memo
data <- dat %>% mutate_at(.vars = c(1:34),
.funs = funs(recode(.,
`1` = 5L,
`2` = 4L,
`3` = 3L,
`4` = 2L,
`5` = 1L,
.default = NA_integer_)))
answers_rc <- cbind(data[, 36], data[, 1:34])
colnames(answers_rc)[1] <- "N Number"
answers_rc
answers_c <- cbind(dat[, 36], dat[, 1:34])
answers_c
answers_r <- cbind(dat0[, 35], dat0[, 1:34])
answers_r
N <- nrow(data) # number of observations
# Group questions by direction
# deep + strategic + self + Q29
positive <- select(data, 4,7,18,23,25,30,
1,2,8,9,13,28,
5,16,19,20,21,22,24,31,33, 29)
# surface + memory - Q29
negative <- select(data, 3,10,11,12,15,17,
6,14,26,27,32,34)
# Compute the average score
positive <- cbind(positive, Average = rowMeans(positive, na.rm = TRUE))
negative <- cbind(negative, Average = rowMeans(negative, na.rm = TRUE))
# Compute the mean of average scores
m_ave_p <- mean(positive$Average)
m_ave_n <- mean(negative$Average)
# Compute the standard deviation of average scores
sd_ave_p <- sd(positive$Average)
sd_ave_n <- sd(negative$Average)
# summary(positive$Average)
# summary(negative$Average)
# Create a line plot to show the mean distribution of average scores
ggplot() +
geom_freqpoly(
data = positive, aes(x = Average), # Positive group
bins = 30, binwidth = .2, size = .8, col = NYUpurple
) +
geom_freqpoly(
data = negative, aes(x = Average), # Negative group
bins = 30, binwidth = .2, size = .8, col = Orange
) +
geom_vline(
xintercept = c(m_ave_p, m_ave_n), size = .7,
color = c(NYUpurple, Orange), linetype = "dashed"
) +
geom_vline(
xintercept = c(m_ave_p+sd_ave_p, m_ave_p-sd_ave_p,
m_ave_n+sd_ave_n, m_ave_n-sd_ave_n),
size = .3, color = c(NYUpurple, NYUpurple, Orange, Orange),
linetype = "dotted"
) +
theme_light() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank()
) +
ggtitle(
label = "Distribution of Average Scores, Line",
subtitle = "Grouped by Direction"
) +
xlab("Average Scores") +
ylab("Count") +
annotate("text",
x = c(m_ave_p+.2, m_ave_n+.2), # Mean values
y = c(0,0),
label = c(3.71, 2.42),
size = 3,
color = c(NYUpurple, Orange)
) +
annotate("text",
x = c(4.6, 1.5),
y = c(50, 50),
label = c("Positive (+)", "Negative (-)"),
size = 3,
color = c(NYUpurple, Orange)
)
# Create subscale groups
# deep: Deep Approach
# strat: Strategic Approach
# surf: Surface Approach
# self: Academic Self-Efficacy Approach
# memory: Conceptual Connections / Memorization Approach
deep <- select(data, 4,7,18,23,25,30)
strat <- select(data, 1,2,8,9,13,28)
surf <- select(data, 3,10,11,12,15,17)
self <- select(data, 5,16,19,20,21,22,24,31,33)
memory <- select(data, 6,14,26,27,29,32,34)
# Recode Question 29 to negative direction
memory <- memory %>% mutate(
Q29.r = recode(Q29, `1` = 5L,
`2` = 4L,
`3` = 3L,
`4` = 2L,
`5` = 1L,
.default = NA_integer_
), Q29 = NULL)
# Compute the sum of scores of each row
deep <- cbind(deep, Total = rowSums(deep, na.rm = TRUE))
strat <- cbind(strat, Total = rowSums(strat, na.rm = TRUE))
surf <- cbind(surf, Total = rowSums(surf, na.rm = TRUE))
self <- cbind(self, Total = rowSums(self, na.rm = TRUE))
memory <- cbind(memory, Total = rowSums(memory, na.rm = TRUE))
# Compute the average scores of each row
deep <- cbind(deep, Average = rowMeans(deep[, 1:6], na.rm = TRUE))
strat <- cbind(strat, Average = rowMeans(strat[, 1:6], na.rm = TRUE))
surf <- cbind(surf, Average = rowMeans(surf[, 1:6], na.rm = TRUE))
self <- cbind(self, Average = rowMeans(self[, 1:9], na.rm = TRUE))
memory <- cbind(memory, Average = rowMeans(memory[, 1:7], na.rm = TRUE))
# Compute the mean of average scores
m_ave_deep <- mean(deep$Average)
m_ave_strat <- mean(strat$Average)
m_ave_surf <- mean(surf$Average)
# Create a line plot to show the mean distribution of average scores
ggplot() +
geom_freqpoly(
data = deep, aes(x = Average),
bins = 30, binwidth = .5, size = .8, col = NYUpurple
) +
geom_freqpoly(
data = strat, aes(x = Average),
bins = 30, binwidth = .5, size = .8, col = Red
) +
geom_freqpoly(
data = surf, aes(x = Average),
bins = 30, binwidth = .5, size = .8, col = Orange
) +
geom_vline(
xintercept = c(m_ave_deep, m_ave_strat, m_ave_surf),
size = .7, color = c(NYUpurple, Red, Orange),
linetype = "dashed"
) +
theme_light() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank()
) +
ggtitle(
label = "Distribution of Average Scores, Line",
subtitle = "Grouped by Approach (Deep, Strategic, Surface)"
) +
xlab("Average Scores") +
ylab("Count") +
annotate("text",
x = c(m_ave_deep-.2, m_ave_strat+.2, m_ave_surf+.2),
y = c(0, 0, 0),
label = c(3.66, 3.79, 2.70), size = 3,
color = c(NYUpurple, Red, Orange)
) +
annotate("text",
x = c(4.3, 5, 1.9),
y = c(110, 90, 90),
label = c("Deep (+)", "Strategic (+)", "Surface (-)"), size = 3,
color = c(NYUpurple, Red, Orange)
)
# Compute the mean of average scores
m_ave_self <- mean(self$Average)
m_ave_memory <- mean(memory$Average)
# Create a line plot to show the mean distribution of average scores
ggplot() +
geom_freqpoly(
data = self, aes(x = Average),
bins = 30, binwidth = .3, size = .8, col = NYUpurple
) +
geom_freqpoly(
data = memory, aes(x = Average),
bins = 30, binwidth = .3, size = .8, col = Orange
) +
geom_vline(
xintercept = c(m_ave_self, m_ave_memory), size = .7,
color = c(NYUpurple, Orange), linetype = "dashed"
) +
theme_light() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank()
) +
ggtitle(
label = "Distribution of Average Scores, Line",
subtitle = "Grouped by Approach (Self-Efficacy, Memorization)"
) +
xlab("Average Scores") +
ylab("Count") +
annotate("text",
x = c(m_ave_self-.2, m_ave_memory+.2),
y = c(0, 0),
label = c(3.66, 2.11), size = 3,
color = c(NYUpurple, Orange)
) +
annotate("text",
x = c(4.7, .9),
y = c(50, 50),
label = c("Self-Efficacy (+)", "Memorization (-)"), size = 3,
color = c(NYUpurple, Orange)
)
# Compute the mean of total scores
m_t_deep <- mean(deep$Total)
m_t_strat <- mean(strat$Total)
m_t_surf <- mean(surf$Total)
# Create a density plot showing the distribution of total scores of `three`
ggplot() +
geom_density(
data = deep, aes(x = Total),
size = .7, col = NYUpurple, fill = NYUpurple, alpha = .2
) +
geom_density(
data = strat, aes(x = Total),
size = .7, col = Green, fill = Green, alpha = .2
) +
geom_density(
data = surf, aes(x = Total),
size = .7, col = Orange, fill = Orange, alpha = .2
) +
geom_vline(
xintercept = c(m_t_deep, m_t_strat, m_t_surf), size = .7,
color = c(NYUpurple, Red, Orange), linetype = "dotted"
) +
theme_light() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank()
) +
ggtitle(
label = "Distribution of Total Scores (0 - 30), Density",
subtitle = "Grouped by Approach (Deep, Strategic, Surface)"
) +
xlab("Total Scores") +
ylab("Density") +
annotate("text",
x = c(m_t_deep-1, m_t_strat+1, m_t_surf-1),
y = c(rep(.1, 3)),
label = c(21.64, 22.65, 16.18), size = 3,
color = c(NYUpurple, Green, Orange)
) +
annotate("text",
x = c(19, 27, 13),
y = c(.09, .09, .09),
label = c("Deep (+)", "Strategic (+)", "Surface (-)"), size = 3,
color = c(NYUpurple, Green, Orange)
)
# Compute the mean of total scores
m_t_self <- mean(self$Total)
# Create a density plot to show the distribution of total scores of `self`
ggplot() +
geom_density(
data = self, aes(x = Total),
size = .7, col = NYUpurple, fill = NYUpurple, alpha = .2
) +
geom_vline(
xintercept = c(m_t_self), size = .7,
color = c(NYUpurple), linetype = "dashed"
) +
geom_vline(
xintercept = seq(0, 45, by = 5),
size = .5, col = NYUpurple, alpha = .5, linetype = "dotted"
) +
theme_light() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank()
) +
ggtitle(
label = "Mean Distribution of Total Scores (0 - 45), Density",
subtitle = "Grouped by Self-Efficacy Approach"
) +
xlab("Total Scores") +
ylab("Density") +
annotate("text",
x = c(m_t_self+1.5),
y = c(.005),
label = c(32.5), size = 3.5, color = NYUpurple
) +
annotate("text",
x = seq(7.5, 45, by = 10),
y = rep(.1, 4),
label = c(2,4,6,8), size = 3, color = NYUpurple
) +
annotate("text",
x = 40,
y = .06,
label = "Self-Efficacy (+)", size = 3, color = NYUpurple
)
# Compute the mean of total scores
m_t_memory <- mean(memory$Total)
# Create a density plot to show the distribution of total scores of `memory`
ggplot() +
geom_density(
data = memory, aes(x = Total),
size = .7, col = Green, fill = Green, alpha = .2
) +
geom_vline(
xintercept = c(m_t_memory), size = .7,
color = c(Green), linetype = "dashed"
) +
geom_vline(
xintercept = seq(0, 35, by = 5),
size = .5, col = Green, alpha = .5, linetype = "dotted"
) +
theme_light() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y = element_blank()
) +
ggtitle(
label = "Mean Distribution of Total Scores (0 - 35), Density",
subtitle = "Grouped by Memorization Approach"
) +
xlab("Total Scores") +
ylab("Density") +
annotate("text",
x = c(m_t_memory-1.5),
y = c(.005),
label = c(14.55), size = 3.5, color = c(Green)
) +
annotate("text",
x = seq(7.5, 35, by = 10),
y = rep(.1, 3),
label = c(2,4,6), size = 3, color = Green
) +
annotate("text",
x = 21,
y = .06,
label = "Memorization (-))", size = 3, color = Green
)
View(deep)
# Prepare data for reliability analysis
relia.deep <- deep[, 1:6]
View(relia.deep)
str(strat)
str(surf)
str(self)
str(memory)
# Prepare data for reliability analysis
relia.deep <- deep[, 1:6]
relia.strat <- strat[, 1:6]
relia.surf <- surf[, 1:6]
relia.self <- self[, 1:9]
relia.memory <- memory[, 1:7]
# Prepare data for reliability analysis
relia.deep <- deep[, 1:6]
relia.strat <- strat[, 1:6]
relia.surf <- surf[, 1:6]
relia.self <- self[, 1:9]
relia.memory <- memory[, 1:7]
psych::alpha(relia.deep, title = "Deep Approach")
psych::alpha(relia.deep, title = "Deep Approach")
psych::alpha(relia.deep, title = "Deep Approach")$alpha
psych::alpha(relia.deep, title = "Deep Approach")$
result
psych::alpha(relia.deep, title = "Deep Approach")$res
score.alpha(relia.deep)
psych::alpha(relia.deep, title = "Deep Approach")$raw_alpha
res_relia_deep <- relia_psych::alpha(relia.deep, title = "Deep Approach")
res_relia_deep <- psych::alpha(relia.deep, title = "Deep Approach")
summary(res_relia_deep)
# Prepare data for reliability analysis
relia.deep <- deep[, 1:6]
relia.strat <- strat[, 1:6]
relia.surf <- surf[, 1:6]
relia.self <- self[, 1:9]
relia.memory <- memory[, 1:7]
# Compute reliability of each subscale
res_relia_deep <- psych::alpha(relia.deep, title = "Deep Approach")
res_relia_strat <- psych::alpha(relia.strat, title = "Strategic Approach")
res_relia_surf <- psych::alpha(relia.surf, title = "Surface Approach")
res_relia_self <- psych::alpha(relia.self, title = "Self-Efficacy Approach")
res_relia_memory <- psych::alpha(relia.memory,
title = "Conceptual Connections/Memorization")
summary(res_relia_deep)
summary(res_relia_strat)
summary(res_relia_surf)
summary(res_relia_self)
summary(res_relia_memory)
setwd("C:\Users\Tong\Documents\GitHub\Multi-Level-Nested-Model-Project")
setwd(C:\Users\Tong\Documents\GitHub\Multi-Level-Nested-Model-Project)
getwd()
C:\Users\Tong\Documents\GitHub\Multi-Level-Nested-Model-Project
setwd("c:\Users\Tong\Documents\GitHub\Multi-Level-Nested-Model-Project")
setwd("c:/Users/Tong/Documents/GitHub/Multi-Level-Nested-Model-Project")
knitr::opts_chunk$set(echo = TRUE)
# Load -------------------------------------------------------------------------
# setwd()
getwd()
classroom <- read.csv("classroom.csv", header = TRUE)
# Load -------------------------------------------------------------------------
# setwd()
# getwd()
dat <- read.csv(
"classroom.csv",
header = TRUE
)
# Load -------------------------------------------------------------------------
# setwd()
# getwd()
dat <- read.csv(
"classroom.csv",
header = TRUE
)
View(dat)
# Load -------------------------------------------------------------------------
# setwd()
# getwd()
dat <- read.csv(
"classroom.csv",
header = TRUE
)
# Create a variable and named as math1st
dat$math1st <- dat$mathkind + dat$mathgain
